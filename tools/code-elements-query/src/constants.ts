import type { ToolConfig, ToolDescription } from '@codellm/core';

export const vectorDbCollectionName = 'codeElements' as const;

export const numResults = 8;

export const DEFAULT_CONFIG: ToolConfig = {
  exclude: [
    '**/build/**',
    '**/cdk.out/**',
    '**/coverage/**',
    '**/dist/**',
    '**/node_modules/**',
  ],
  include: [
    '**/*.ts',
    '**/*.js',
    '**/*.jsx',
    '**/*.tsx',
    '**/*.py',
    '**/*.tf',
    '**/*.rb',
    '**/*.java',
    '**/*.c',
    '**/*.cpp',
    '**/*.h',
    '**/*.hpp',
    '**/*.cs',
    '**/*.go',
    '**/*.rs',
    '**/*.swift',
    '**/*.php',
    '**/*.sh',
    '**/*.bash',
    '**/*.fish',
    '**/*.ps1',
    '**/*.psm1',
    '**/*.psd1',
    '**/*.bat',
    '**/*.cmd',
    '**/*.vbs',
    '**/*.vba',
    '**/*.vbscript',
    '**/*.wsf',
    '**/*.wsc',
    '**/*.wsh',
  ],
  vectorDbCollectionName,
  vectorDbName: 'chromadb',
} as const;

export const summarizeTaskPrompt = `
  Your task is to generate an extremely concise list of the elements used in the provided code. You should only include the filename along with functions, classes, types, and concepts. You should not include any prose or comments and should list each element under a relevant heading. For example, you should list all functions under a heading "###Functions" and all classes under a heading "###Classes".
`;

export const description: ToolDescription = {
  description: `This tool processes a query generated by an LLM to gather relevant code, full file paths, and code summaries from a vector db collection to provide context to assist the asking LLM in answering a question. It will list code elements and provide relevant code to the asker so that it can answer a question. The query should only include relevant file path parts, functions, classes, types, and concepts that are relevant to the user's question. The information returned should not be considered comprehensive or precise. This tool is a good starting point for discovering information related to a user's question about a specific function, class, type, or variable.`,
  name: 'codeElementsQuery',
  params: [
    {
      description: `A flag to determine if relevant code should be included in the response to help you answer the user's question.`,
      name: 'includeCode',
      required: true,
      type: 'bool',
    },
    {
      description: `The query to use to find relevant code and code summaries to help you answer the user's question. The query should only include functions, classes, types, or variables from within the codebase.`,
      name: 'query',
      required: true,
      type: 'string',
    },
  ],
} as const;
